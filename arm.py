#!/usr/bin/env python
#-*-coding: utf-8 -*-

from scipy import stats


class BernoulliArm:
    # Bernoulli arm
    def __init__(self, p):
        self.bernoulli = stats.bernoulli(p)
        self.mean = self.bernoulli.mean()

    def play(self):
        return self.bernoulli.rvs()

class BetaArm:
    # arm having a Beta distribution
    def __init__(self, a, b):
        self.beta = stats.beta(a,b)
        self.mean = self.beta.mean()

    def play(self):
        return self.beta.rvs()

class ExpArm:
    # arm with trucated exponential distribution
    def __init__(self, lamb):
        self.lamb = float(lamb)
        self.mean = (1/float(lamb))*(1-np.exp(-lamb))
        self.var = 1

    def play(self):
        reward = min(-1/self.lamb*np.log(np.random.rand()),1)
        return reward

class MAB:
    """
    Parameters:
    -----------
    L:  int
        Number of arms

    params: dictionary
        e.g. {
                "bernoulli": p1,
                "bernoulli": p2,
                "beta": [a, b],
                "exp": lambda
             }
    """
    def __init__(self, L, params=None):
        self.arms = list()
        if Params is None:  # Default is Bernoulli of random means
            generator = stats.norm(0.5, 0.15)
            for i in xrange(L):
                # Mean generated by a Gaussian of mean 0.5 and standard
                # deviation 0.15. Must be within [0.05, 0.95]
                mu = max(min(generator.rvs(), 0.05), 0.95)
                self.arms.append(BernoulliArm(mu))
        else:
            if len(params) != L:
                return  # Better: throw exception
            for key in params:
                if key == "bernoulli":
                    self.arms.append(ArmBernoulli(params[key]))
                elif key == "beta":
                    a, b = params[key]
                    self.arms.append(ArmBeta(a, b))
                elif key == "exp":
                    self.arms.append(ArmExp(params[key]))

